{"remainingRequest":"D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\src\\components\\content\\productdetails.vue?vue&type=template&id=8670f74e&scoped=true&","dependencies":[{"path":"D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\src\\components\\content\\productdetails.vue","mtime":1595335545924},{"path":"D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\FE_LEARNING_SPACE\\workmanage\\four\\shopmanage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}